name: Frontend Docker Build and Push

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test --run

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-name: ${{ steps.image-name.outputs.lowercase }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert image name to lowercase
        id: image-name
        run: echo "lowercase=$(echo '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:fast

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image-name.outputs.lowercase }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # platforms: linux/amd64,linux/arm64  # Removed for faster builds
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get image tag for scanning
        id: scan-tag
        run: |
          # Use lowercase image name
          BASE_IMAGE="${{ needs.build.outputs.image-name }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="${BASE_IMAGE}:latest"
          else
            # For non-main branches, use the branch name
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            IMAGE_TAG="${BASE_IMAGE}:${BRANCH_NAME}"
          fi
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Scanning image: ${IMAGE_TAG}"

      - name: Verify image exists before scanning
        run: |
          echo "Checking if image exists: ${{ steps.scan-tag.outputs.image-tag }}"
          docker manifest inspect ${{ steps.scan-tag.outputs.image-tag }} || {
            echo "ERROR: Image ${{ steps.scan-tag.outputs.image-tag }} not found"
            echo "Available tags for ${{ needs.build.outputs.image-name }}:"
            # This will show what tags are actually available
            docker images --format "table {{.Repository}}:{{.Tag}}" | grep "$(echo '${{ needs.build.outputs.image-name }}' | cut -d'/' -f2)" || echo "No images found"
            exit 1
          }

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.scan-tag.outputs.image-tag }}
          format: "sarif"
          output: "trivy-results.sarif"
          skip-files: "**/*.test.js,**/*.spec.js,**/node_modules/**"
          skip-dirs: "node_modules,test,tests"
          exit-code: "0" # Don't fail the build on vulnerabilities
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
