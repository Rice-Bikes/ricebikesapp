import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Box, Paper, Grid2, Button, Stack } from '@mui/material';
import { useBikeSteps } from '../../hooks/useBikeSteps';
import { BikeTransactionStepper } from '../../components/BikeTransactionStepper';
import { CustomerInfoStep } from '../../components/BikeTransactionSteps/CustomerInfoStep';
import { BikeSelectionStep } from '../../components/BikeTransactionSteps/BikeSelectionStep';
import { InspectionStep, InspectionData } from '../../components/BikeTransactionSteps/InspectionStep';
import { PricingStep, PricingData } from '../../components/BikeTransactionSteps/PricingStep';
import { CompletionStep } from '../../components/BikeTransactionSteps/CompletionStep';
import { Customer } from '../../model';
import { EnhancedBike } from '../../types/BikeTransaction';

export const BikeTransactionPage: React.FC = () => {
    const { transaction_id } = useParams<{ transaction_id: string }>();
    const {
        currentTransaction,
        initializeTransaction,
        getCurrentStep,
        getAllSteps,
        getCompletionProgress,
        moveToNextStep,
        moveToPreviousStep,
        updateStepCompletion
    } = useBikeSteps();

    // State for step data
    const [customer, setCustomer] = useState<Customer | null>(null);
    const [bike, setBike] = useState<EnhancedBike | null>(null);
    const [inspection, setInspection] = useState<InspectionData | null>(null);
    const [pricing, setPricing] = useState<PricingData | null>(null);

    useEffect(() => {
        if (transaction_id && !currentTransaction) {
            initializeTransaction(transaction_id);
        }
    }, [transaction_id, currentTransaction, initializeTransaction]);

    if (!currentTransaction || !transaction_id) {
        return <div>Loading transaction...</div>;
    }

    const currentStep = getCurrentStep();
    const allSteps = getAllSteps();
    const progress = getCompletionProgress();
    const isFirstStep = currentTransaction.currentStepIndex === 0;
    const isLastStep = currentTransaction.currentStepIndex === allSteps.length - 1;

    // Helper function to render step-specific content
    const renderStepContent = (stepId: string): React.ReactNode => {
        switch (stepId) {
            case 'customer-info':
                return (
                    <CustomerInfoStep
                        onCustomerSelected={(customerData) => {
                            setCustomer(customerData);
                            if (currentStep) {
                                updateStepCompletion(currentStep.id, true);
                            }
                        }}
                        existingCustomer={customer || undefined}
                    />
                );

            case 'bike-selection':
                return (
                    <BikeSelectionStep
                        onBikeSelected={(bikeData) => {
                            setBike(bikeData);
                            if (currentStep) {
                                updateStepCompletion(currentStep.id, true);
                            }
                        }}
                        existingBike={bike || undefined}
                    />
                );

            case 'inspection':
                if (!bike) {
                    return (
                        <Box sx={{ p: 3, textAlign: 'center' }}>
                            <h3>Bike Selection Required</h3>
                            <p>Please complete bike selection before proceeding to inspection.</p>
                        </Box>
                    );
                }
                return (
                    <InspectionStep
                        bike={bike}
                        onInspectionComplete={(inspectionData) => {
                            setInspection(inspectionData);
                            if (currentStep) {
                                updateStepCompletion(currentStep.id, true);
                            }
                        }}
                        existingInspection={inspection || undefined}
                    />
                );

            case 'pricing':
                if (!bike || !inspection) {
                    return (
                        <Box sx={{ p: 3, textAlign: 'center' }}>
                            <h3>Previous Steps Required</h3>
                            <p>Please complete bike selection and inspection before pricing.</p>
                        </Box>
                    );
                }
                return (
                    <PricingStep
                        bike={bike}
                        inspection={inspection}
                        onPricingComplete={(pricingData) => {
                            setPricing(pricingData);
                            if (currentStep) {
                                updateStepCompletion(currentStep.id, true);
                            }
                        }}
                        existingPricing={pricing || undefined}
                    />
                );

            case 'completion':
                if (!customer || !bike || !inspection || !pricing) {
                    return (
                        <Box sx={{ p: 3, textAlign: 'center' }}>
                            <h3>All Steps Required</h3>
                            <p>Please complete all previous steps before finalizing the transaction.</p>
                        </Box>
                    );
                }
                return (
                    <CompletionStep
                        bike={bike}
                        customer={customer}
                        inspection={inspection}
                        pricing={pricing}
                        onTransactionComplete={(completionData) => {
                            console.log('Transaction completed:', completionData);
                            if (currentStep) {
                                updateStepCompletion(currentStep.id, true);
                            }
                        }}
                    />
                );

            default:
                return (
                    <Box>
                        <p>Step content not implemented yet.</p>
                        <p>Step ID: {stepId}</p>
                    </Box>
                );
        }
    };

    const handleStepComplete = () => {
        if (currentStep) {
            updateStepCompletion(currentStep.id, true);
            if (!isLastStep) {
                moveToNextStep();
            }
        }
    };

    const handleStepIncomplete = () => {
        if (currentStep) {
            updateStepCompletion(currentStep.id, false);
        }
    };

    return (
        <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>
            <Grid2 container spacing={3}>
                {/* Left Sidebar - Progress Tracker */}
                <Grid2 size={4}>
                    <Paper sx={{ p: 2, position: 'sticky', top: 20 }}>
                        <BikeTransactionStepper
                            steps={allSteps}
                            activeStep={currentTransaction.currentStepIndex}
                            completionProgress={progress}
                        />
                    </Paper>
                </Grid2>

                {/* Main Content Area */}
                <Grid2 size={8}>
                    <Paper sx={{ p: 3 }}>
                        {currentStep && (
                            <>
                                <Box sx={{ mb: 3 }}>
                                    <h2>{currentStep.name}</h2>
                                    <p style={{ color: 'gray' }}>{currentStep.description}</p>
                                </Box>

                                {/* Dynamic Step Content */}
                                <Box sx={{ mb: 4, minHeight: 400 }}>
                                    {renderStepContent(currentStep.id)}
                                </Box>

                                {/* Step Navigation */}
                                <Stack direction="row" spacing={2} justifyContent="space-between">
                                    <Box>
                                        <Button
                                            variant="outlined"
                                            onClick={moveToPreviousStep}
                                            disabled={isFirstStep}
                                        >
                                            Previous Step
                                        </Button>
                                    </Box>

                                    <Stack direction="row" spacing={2}>
                                        <Button
                                            variant="outlined"
                                            color="warning"
                                            onClick={handleStepIncomplete}
                                            disabled={!currentStep?.isCompleted}
                                        >
                                            Mark Incomplete
                                        </Button>
                                        <Button
                                            variant="contained"
                                            onClick={handleStepComplete}
                                            disabled={currentStep?.isCompleted}
                                        >
                                            {currentStep?.isCompleted ? 'Step Complete' : 'Complete Step'}
                                        </Button>
                                        {!isLastStep && (
                                            <Button
                                                variant="contained"
                                                onClick={moveToNextStep}
                                                disabled={!currentStep?.isCompleted}
                                            >
                                                Next Step
                                            </Button>
                                        )}
                                    </Stack>
                                </Stack>

                                {currentTransaction.isCompleted && (
                                    <Box sx={{ mt: 3, p: 2, bgcolor: 'success.light', borderRadius: 1 }}>
                                        <h3>🎉 Transaction Complete!</h3>
                                        <p>All steps have been completed for this bike sale transaction.</p>
                                    </Box>
                                )}
                            </>
                        )}
                    </Paper>
                </Grid2>
            </Grid2>
        </Box>
    );
};
